{"remainingRequest":"/Users/admin/Desktop/template-vue/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/template-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/template-vue/src/components/CountDown/CountDown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/template-vue/src/components/CountDown/CountDown.vue","mtime":1535529988000},{"path":"/Users/admin/Desktop/template-vue/node_modules/cache-loader/dist/cjs.js","mtime":1544032770804},{"path":"/Users/admin/Desktop/template-vue/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/admin/Desktop/template-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: [\"totalTime\"],\n  mounted: function mounted() {\n    var timeLeftVar = this.secondsToTime(this.seconds);\n    this.time = timeLeftVar;\n    this.startTimer();\n  },\n  data: function data() {\n    return {\n      time: {},\n      seconds: this.totalTime ? this.totalTime : 2600,\n      timer: 0\n    };\n  },\n  computed: {\n    hours: function hours() {\n      return this.time.h;\n    },\n    totalMinutes: function totalMinutes() {\n      return this.time.m;\n    },\n    totalSeconds: function totalSeconds() {\n      return this.time.s;\n    }\n  },\n  methods: {\n    secondsToTime: function secondsToTime(secs) {\n      var hours = Math.floor(secs / (60 * 60));\n      var divisor_for_minutes = secs % (60 * 60);\n      var minutes = Math.floor(divisor_for_minutes / 60);\n      var divisor_for_seconds = divisor_for_minutes % 60;\n      var seconds = Math.ceil(divisor_for_seconds);\n      var obj = {\n        h: hours,\n        m: minutes,\n        s: seconds\n      };\n      return obj;\n    },\n    startTimer: function startTimer() {\n      var _this = this;\n\n      if (this.timer === 0) {\n        this.timer = setInterval(function () {\n          _this.countDown();\n        }, 1000);\n      }\n    },\n    countDown: function countDown() {\n      // Remove one second, and call secondsToTime method\n      var seconds = this.seconds - 1;\n      this.time = this.secondsToTime(seconds);\n      this.seconds = seconds; // Check if we're at zero.\n\n      if (seconds == 0) {\n        clearInterval(this.timer);\n      }\n    }\n  },\n  destroyed: function destroyed() {\n    clearInterval(this.timer);\n  }\n};",{"version":3,"sources":["CountDown.vue"],"names":[],"mappings":";;;;;;;AAQA,eAAA;AACA,SAAA,CAAA,WAAA,CADA;AAEA,SAFA,qBAEA;AACA,QAAA,cAAA,KAAA,aAAA,CAAA,KAAA,OAAA,CAAA;AACA,SAAA,IAAA,GAAA,WAAA;AACA,SAAA,UAAA;AACA,GANA;AAOA,MAPA,kBAOA;AACA,WAAA;AACA,YAAA,EADA;AAEA,eAAA,KAAA,SAAA,GAAA,KAAA,SAAA,GAAA,IAFA;AAGA,aAAA;AAHA,KAAA;AAKA,GAbA;AAcA,YAAA;AACA,SADA,mBACA;AACA,aAAA,KAAA,IAAA,CAAA,CAAA;AACA,KAHA;AAIA,gBAJA,0BAIA;AACA,aAAA,KAAA,IAAA,CAAA,CAAA;AACA,KANA;AAOA,gBAPA,0BAOA;AACA,aAAA,KAAA,IAAA,CAAA,CAAA;AACA;AATA,GAdA;AAyBA,WAAA;AACA,iBADA,yBACA,IADA,EACA;AACA,UAAA,QAAA,KAAA,KAAA,CAAA,QAAA,KAAA,EAAA,CAAA,CAAA;AAEA,UAAA,sBAAA,QAAA,KAAA,EAAA,CAAA;AACA,UAAA,UAAA,KAAA,KAAA,CAAA,sBAAA,EAAA,CAAA;AAEA,UAAA,sBAAA,sBAAA,EAAA;AACA,UAAA,UAAA,KAAA,IAAA,CAAA,mBAAA,CAAA;AAEA,UAAA,MAAA;AACA,WAAA,KADA;AAEA,WAAA,OAFA;AAGA,WAAA;AAHA,OAAA;AAKA,aAAA,GAAA;AACA,KAhBA;AAiBA,cAjBA,wBAiBA;AAAA;;AACA,UAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AACA,aAAA,KAAA,GAAA,YAAA,YAAA;AACA,gBAAA,SAAA;AACA,SAFA,EAEA,IAFA,CAAA;AAGA;AACA,KAvBA;AAwBA,aAxBA,uBAwBA;AACA;AACA,UAAA,UAAA,KAAA,OAAA,GAAA,CAAA;AACA,WAAA,IAAA,GAAA,KAAA,aAAA,CAAA,OAAA,CAAA;AACA,WAAA,OAAA,GAAA,OAAA,CAJA,CAKA;;AACA,UAAA,WAAA,CAAA,EAAA;AACA,sBAAA,KAAA,KAAA;AACA;AACA;AAjCA,GAzBA;AA4DA,WA5DA,uBA4DA;AACA,kBAAA,KAAA,KAAA;AACA;AA9DA,CAAA","sourcesContent":["<!-- Countdown Timer -->\n<template>\n  <div>\n   <h3 class=\"mb-0\">{{ totalMinutes }} : {{ totalSeconds < 10 ? `0${totalSeconds}`: totalSeconds }}</h3>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: [\"totalTime\"],\n  mounted() {\n    let timeLeftVar = this.secondsToTime(this.seconds);\n    this.time = timeLeftVar;\n    this.startTimer();\n  },\n  data() {\n    return {\n      time: {},\n      seconds: this.totalTime ? this.totalTime : 2600,\n      timer: 0\n    };\n  },\n  computed: {\n    hours() {\n      return this.time.h;\n    },\n    totalMinutes() {\n      return this.time.m;\n    },\n    totalSeconds() {\n      return this.time.s;\n    }\n  },\n  methods: {\n    secondsToTime(secs) {\n      let hours = Math.floor(secs / (60 * 60));\n\n      let divisor_for_minutes = secs % (60 * 60);\n      let minutes = Math.floor(divisor_for_minutes / 60);\n\n      let divisor_for_seconds = divisor_for_minutes % 60;\n      let seconds = Math.ceil(divisor_for_seconds);\n\n      let obj = {\n        h: hours,\n        m: minutes,\n        s: seconds\n      };\n      return obj;\n    },\n    startTimer() {\n      if (this.timer === 0) {\n        this.timer = setInterval(() => {\n          this.countDown();\n        }, 1000);\n      }\n    },\n    countDown() {\n      // Remove one second, and call secondsToTime method\n      let seconds = this.seconds - 1;\n      this.time = this.secondsToTime(seconds);\n      this.seconds = seconds;\n      // Check if we're at zero.\n      if (seconds == 0) {\n        clearInterval(this.timer);\n      }\n    }\n  },\n  destroyed() {\n    clearInterval(this.timer);\n  }\n};\n</script>\n"],"sourceRoot":"src/components/CountDown"}]}