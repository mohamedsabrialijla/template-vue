{"remainingRequest":"/Users/admin/Desktop/template-vue/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/template-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/template-vue/node_modules/vue-radial-progress/src/RadialProgressBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/template-vue/node_modules/vue-radial-progress/src/RadialProgressBar.vue","mtime":1489167528000},{"path":"/Users/admin/Desktop/template-vue/node_modules/cache-loader/dist/cjs.js","mtime":1544032770804},{"path":"/Users/admin/Desktop/template-vue/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/admin/Desktop/template-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    diameter: {\n      type: Number,\n      required: false,\n      default: 200\n    },\n    totalSteps: {\n      type: Number,\n      required: true,\n      default: 10\n    },\n    completedSteps: {\n      type: Number,\n      required: true,\n      default: 0\n    },\n    startColor: {\n      type: String,\n      required: false,\n      default: '#bbff42'\n    },\n    stopColor: {\n      type: String,\n      required: false,\n      default: '#429321'\n    },\n    strokeWidth: {\n      type: Number,\n      required: false,\n      default: 10\n    },\n    animateSpeed: {\n      type: Number,\n      required: false,\n      default: 1000\n    },\n    innerStrokeColor: {\n      type: String,\n      required: false,\n      default: '#323232'\n    },\n    fps: {\n      type: Number,\n      required: false,\n      default: 60\n    },\n    timingFunc: {\n      type: String,\n      required: false,\n      default: 'linear'\n    }\n  },\n  data: function data() {\n    return {\n      gradient: {\n        fx: 0.99,\n        fy: 0.5,\n        cx: 0.5,\n        cy: 0.5,\n        r: 0.65\n      },\n      gradientAnimation: null,\n      currentAngle: 0,\n      strokeDashoffset: 0\n    };\n  },\n  computed: {\n    radius: function radius() {\n      return this.diameter / 2;\n    },\n    circumference: function circumference() {\n      return Math.PI * this.innerCircleDiameter;\n    },\n    stepSize: function stepSize() {\n      if (this.totalSteps === 0) {\n        return 0;\n      }\n\n      return 100 / this.totalSteps;\n    },\n    finishedPercentage: function finishedPercentage() {\n      return this.stepSize * this.completedSteps;\n    },\n    circleSlice: function circleSlice() {\n      return 2 * Math.PI / this.totalSteps;\n    },\n    animateSlice: function animateSlice() {\n      return this.circleSlice / this.totalPoints;\n    },\n    innerCircleDiameter: function innerCircleDiameter() {\n      return this.diameter - this.strokeWidth * 2;\n    },\n    innerCircleRadius: function innerCircleRadius() {\n      return this.innerCircleDiameter / 2;\n    },\n    totalPoints: function totalPoints() {\n      return this.animateSpeed / this.animationIncrements;\n    },\n    animationIncrements: function animationIncrements() {\n      return 1000 / this.fps;\n    },\n    hasGradient: function hasGradient() {\n      return this.startColor !== this.stopColor;\n    },\n    containerStyle: function containerStyle() {\n      return {\n        height: \"\".concat(this.diameter, \"px\"),\n        width: \"\".concat(this.diameter, \"px\")\n      };\n    },\n    progressStyle: function progressStyle() {\n      return {\n        height: \"\".concat(this.diameter, \"px\"),\n        width: \"\".concat(this.diameter, \"px\"),\n        strokeWidth: \"\".concat(this.strokeWidth, \"px\"),\n        strokeDashoffset: this.strokeDashoffset,\n        transition: \"stroke-dashoffset \".concat(this.animateSpeed, \"ms \").concat(this.timingFunc)\n      };\n    },\n    strokeStyle: function strokeStyle() {\n      return {\n        height: \"\".concat(this.diameter, \"px\"),\n        width: \"\".concat(this.diameter, \"px\"),\n        strokeWidth: \"\".concat(this.strokeWidth, \"px\")\n      };\n    },\n    innerCircleStyle: function innerCircleStyle() {\n      return {\n        width: \"\".concat(this.innerCircleDiameter, \"px\")\n      };\n    }\n  },\n  methods: {\n    getStopPointsOfCircle: function getStopPointsOfCircle(steps) {\n      var points = [];\n\n      for (var i = 0; i < steps; i++) {\n        var angle = this.circleSlice * i;\n        points.push(this.getPointOfCircle(angle));\n      }\n\n      return points;\n    },\n    getPointOfCircle: function getPointOfCircle(angle) {\n      var radius = 0.5;\n      var x = radius + radius * Math.cos(angle);\n      var y = radius + radius * Math.sin(angle);\n      return {\n        x: x,\n        y: y\n      };\n    },\n    gotoPoint: function gotoPoint() {\n      var point = this.getPointOfCircle(this.currentAngle);\n      this.gradient.fx = point.x;\n      this.gradient.fy = point.y;\n    },\n    changeProgress: function changeProgress(_ref) {\n      var _this = this;\n\n      var _ref$isAnimate = _ref.isAnimate,\n          isAnimate = _ref$isAnimate === void 0 ? true : _ref$isAnimate;\n      this.strokeDashoffset = (100 - this.finishedPercentage) / 100 * this.circumference;\n\n      if (this.gradientAnimation) {\n        clearInterval(this.gradientAnimation);\n      }\n\n      if (!isAnimate) {\n        this.gotoNextStep();\n        return;\n      }\n\n      var angleOffset = (this.completedSteps - 1) * this.circleSlice;\n      var i = (this.currentAngle - angleOffset) / this.animateSlice;\n      var incrementer = Math.abs(i - this.totalPoints) / this.totalPoints;\n      var isMoveForward = i < this.totalPoints;\n      this.gradientAnimation = setInterval(function () {\n        if (isMoveForward && i >= _this.totalPoints || !isMoveForward && i < _this.totalPoints) {\n          clearInterval(_this.gradientAnimation);\n          return;\n        }\n\n        _this.currentAngle = angleOffset + _this.animateSlice * i;\n\n        _this.gotoPoint();\n\n        i += isMoveForward ? incrementer : -incrementer;\n      }, this.animationIncrements);\n    },\n    gotoNextStep: function gotoNextStep() {\n      this.currentAngle = this.completedSteps * this.circleSlice;\n      this.gotoPoint();\n    }\n  },\n  watch: {\n    totalSteps: function totalSteps() {\n      this.changeProgress({\n        isAnimate: true\n      });\n    },\n    completedSteps: function completedSteps() {\n      this.changeProgress({\n        isAnimate: true\n      });\n    },\n    diameter: function diameter() {\n      this.changeProgress({\n        isAnimate: true\n      });\n    },\n    strokeWidth: function strokeWidth() {\n      this.changeProgress({\n        isAnimate: true\n      });\n    }\n  },\n  created: function created() {\n    this.changeProgress({\n      isAnimate: false\n    });\n  }\n};",{"version":3,"sources":["RadialProgressBar.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"radial-progress-container\" :style=\"containerStyle\">\r\n    <div class=\"radial-progress-inner\" :style=\"innerCircleStyle\">\r\n      <slot></slot>\r\n    </div>\r\n    <svg class=\"radial-progress-bar\"\r\n         :width=\"diameter\"\r\n         :height=\"diameter\"\r\n         version=\"1.1\"\r\n         xmlns=\"http://www.w3.org/2000/svg\">\r\n      <defs>\r\n        <radialGradient :id=\"'radial-gradient' + _uid\"\r\n                        :fx=\"gradient.fx\"\r\n                        :fy=\"gradient.fy\"\r\n                        :cx=\"gradient.cx\"\r\n                        :cy=\"gradient.cy\"\r\n                        :r=\"gradient.r\">\r\n          <stop offset=\"30%\" :stop-color=\"startColor\"/>\r\n          <stop offset=\"100%\" :stop-color=\"stopColor\"/>\r\n        </radialGradient>\r\n      </defs>\r\n      <circle :r=\"innerCircleRadius\"\r\n              :cx=\"radius\"\r\n              :cy=\"radius\"\r\n              fill=\"transparent\"\r\n              :stroke=\"innerStrokeColor\"\r\n              :stroke-dasharray=\"circumference\"\r\n              stroke-dashoffset=\"0\"\r\n              stroke-linecap=\"round\"\r\n              :style=\"strokeStyle\"></circle>\r\n      <circle :transform=\"'rotate(270, ' + radius + ',' + radius + ')'\"\r\n              :r=\"innerCircleRadius\"\r\n              :cx=\"radius\"\r\n              :cy=\"radius\"\r\n              fill=\"transparent\"\r\n              :stroke=\"'url(#radial-gradient' + _uid + ')'\"\r\n              :stroke-dasharray=\"circumference\"\r\n              :stroke-dashoffset=\"circumference\"\r\n              stroke-linecap=\"round\"\r\n              :style=\"progressStyle\"></circle>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    diameter: {\r\n      type: Number,\r\n      required: false,\r\n      default: 200\r\n    },\r\n    totalSteps: {\r\n      type: Number,\r\n      required: true,\r\n      default: 10\r\n    },\r\n    completedSteps: {\r\n      type: Number,\r\n      required: true,\r\n      default: 0\r\n    },\r\n    startColor: {\r\n      type: String,\r\n      required: false,\r\n      default: '#bbff42'\r\n    },\r\n    stopColor: {\r\n      type: String,\r\n      required: false,\r\n      default: '#429321'\r\n    },\r\n    strokeWidth: {\r\n      type: Number,\r\n      required: false,\r\n      default: 10\r\n    },\r\n    animateSpeed: {\r\n      type: Number,\r\n      required: false,\r\n      default: 1000\r\n    },\r\n    innerStrokeColor: {\r\n      type: String,\r\n      required: false,\r\n      default: '#323232'\r\n    },\r\n    fps: {\r\n      type: Number,\r\n      required: false,\r\n      default: 60\r\n    },\r\n    timingFunc: {\r\n      type: String,\r\n      required: false,\r\n      default: 'linear'\r\n    }\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      gradient: {\r\n        fx: 0.99,\r\n        fy: 0.5,\r\n        cx: 0.5,\r\n        cy: 0.5,\r\n        r: 0.65\r\n      },\r\n      gradientAnimation: null,\r\n      currentAngle: 0,\r\n      strokeDashoffset: 0\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    radius () {\r\n      return this.diameter / 2\r\n    },\r\n\r\n    circumference () {\r\n      return Math.PI * this.innerCircleDiameter\r\n    },\r\n\r\n    stepSize () {\r\n      if (this.totalSteps === 0) {\r\n        return 0\r\n      }\r\n\r\n      return 100 / this.totalSteps\r\n    },\r\n\r\n    finishedPercentage () {\r\n      return this.stepSize * this.completedSteps\r\n    },\r\n\r\n    circleSlice () {\r\n      return 2 * Math.PI / this.totalSteps\r\n    },\r\n\r\n    animateSlice () {\r\n      return this.circleSlice / this.totalPoints\r\n    },\r\n\r\n    innerCircleDiameter () {\r\n      return this.diameter - (this.strokeWidth * 2)\r\n    },\r\n\r\n    innerCircleRadius () {\r\n      return this.innerCircleDiameter / 2\r\n    },\r\n\r\n    totalPoints () {\r\n      return this.animateSpeed / this.animationIncrements\r\n    },\r\n\r\n    animationIncrements () {\r\n      return 1000 / this.fps\r\n    },\r\n\r\n    hasGradient () {\r\n      return this.startColor !== this.stopColor\r\n    },\r\n\r\n    containerStyle () {\r\n      return {\r\n        height: `${this.diameter}px`,\r\n        width: `${this.diameter}px`\r\n      }\r\n    },\r\n\r\n    progressStyle () {\r\n      return {\r\n        height: `${this.diameter}px`,\r\n        width: `${this.diameter}px`,\r\n        strokeWidth: `${this.strokeWidth}px`,\r\n        strokeDashoffset: this.strokeDashoffset,\r\n        transition: `stroke-dashoffset ${this.animateSpeed}ms ${this.timingFunc}`\r\n      }\r\n    },\r\n\r\n    strokeStyle () {\r\n      return {\r\n        height: `${this.diameter}px`,\r\n        width: `${this.diameter}px`,\r\n        strokeWidth: `${this.strokeWidth}px`\r\n      }\r\n    },\r\n\r\n    innerCircleStyle () {\r\n      return {\r\n        width: `${this.innerCircleDiameter}px`\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    getStopPointsOfCircle (steps) {\r\n      const points = []\r\n\r\n      for (let i = 0; i < steps; i++) {\r\n        const angle = this.circleSlice * i\r\n        points.push(this.getPointOfCircle(angle))\r\n      }\r\n\r\n      return points\r\n    },\r\n\r\n    getPointOfCircle (angle) {\r\n      const radius = 0.5\r\n\r\n      const x = radius + (radius * Math.cos(angle))\r\n      const y = radius + (radius * Math.sin(angle))\r\n\r\n      return { x, y }\r\n    },\r\n\r\n    gotoPoint () {\r\n      const point = this.getPointOfCircle(this.currentAngle)\r\n\r\n      this.gradient.fx = point.x\r\n      this.gradient.fy = point.y\r\n    },\r\n\r\n    changeProgress ({ isAnimate = true }) {\r\n      this.strokeDashoffset = ((100 - this.finishedPercentage) / 100) * this.circumference\r\n\r\n      if (this.gradientAnimation) {\r\n        clearInterval(this.gradientAnimation)\r\n      }\r\n\r\n      if (!isAnimate) {\r\n        this.gotoNextStep()\r\n        return\r\n      }\r\n\r\n      const angleOffset = (this.completedSteps - 1) * this.circleSlice\r\n      let i = (this.currentAngle - angleOffset) / this.animateSlice\r\n      const incrementer = Math.abs(i - this.totalPoints) / this.totalPoints\r\n      const isMoveForward = i < this.totalPoints\r\n\r\n      this.gradientAnimation = setInterval(() => {\r\n        if (isMoveForward && i >= this.totalPoints ||\r\n            !isMoveForward && i < this.totalPoints) {\r\n          clearInterval(this.gradientAnimation)\r\n          return\r\n        }\r\n\r\n        this.currentAngle = angleOffset + (this.animateSlice * i)\r\n        this.gotoPoint()\r\n\r\n        i += isMoveForward ? incrementer : -incrementer\r\n      }, this.animationIncrements)\r\n    },\r\n\r\n    gotoNextStep () {\r\n      this.currentAngle = this.completedSteps * this.circleSlice\r\n      this.gotoPoint()\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    totalSteps () {\r\n      this.changeProgress({ isAnimate: true })\r\n    },\r\n\r\n    completedSteps () {\r\n      this.changeProgress({ isAnimate: true })\r\n    },\r\n\r\n    diameter () {\r\n      this.changeProgress({ isAnimate: true })\r\n    },\r\n\r\n    strokeWidth () {\r\n      this.changeProgress({ isAnimate: true })\r\n    }\r\n  },\r\n\r\n  created () {\r\n    this.changeProgress({ isAnimate: false })\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.radial-progress-container {\r\n  position: relative;\r\n}\r\n\r\n.radial-progress-inner {\r\n  position: absolute;\r\n  top: 0; right: 0; bottom: 0; left: 0;\r\n  position: absolute;\r\n  border-radius: 50%;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n</style>\r\n"],"sourceRoot":"node_modules/vue-radial-progress/src"}]}