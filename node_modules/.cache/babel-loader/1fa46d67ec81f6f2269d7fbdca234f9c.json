{"remainingRequest":"/Users/admin/Desktop/template-vue/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/template-vue/src/components/Charts/AdCampaignPerfomance.js","dependencies":[{"path":"/Users/admin/Desktop/template-vue/src/components/Charts/AdCampaignPerfomance.js","mtime":1535529988000},{"path":"/Users/admin/Desktop/template-vue/node_modules/cache-loader/dist/cjs.js","mtime":1544032770804},{"path":"/Users/admin/Desktop/template-vue/node_modules/babel-loader/lib/index.js","mtime":1529635966000}],"contextDependencies":[],"result":["// Sales Widget\nimport { Bar, Line } from 'vue-chartjs';\nimport { ChartConfig } from \"Constants/chart-config\";\nexport default {\n  extends: Bar,\n  Line: Line,\n  props: ['data'],\n  data: function data() {\n    return {\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          yAxes: [{\n            ticks: {\n              display: false,\n              max: 80\n            },\n            gridLines: {\n              display: false,\n              drawBorder: false\n            }\n          }],\n          xAxes: [{\n            ticks: {\n              padding: 10\n            },\n            barPercentage: 1.1,\n            categoryPercentage: 0.4,\n            gridLines: {\n              display: false,\n              drawBorder: false\n            }\n          }]\n        },\n        legend: {\n          display: false\n        }\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this$data = this.data,\n        labels = _this$data.labels,\n        lineChartData = _this$data.lineChartData,\n        barChartData = _this$data.barChartData,\n        barChartData2 = _this$data.barChartData2;\n\n    if (this.enableShadow !== false) {\n      var ctx = this.$refs.canvas.getContext('2d');\n      var _stroke = ctx.stroke;\n\n      ctx.stroke = function () {\n        ctx.save();\n        ctx.shadowColor = ChartConfig.shadowColor;\n        ctx.shadowBlur = 10;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 12;\n\n        _stroke.apply(this, arguments);\n\n        ctx.restore();\n      };\n    }\n\n    this.renderChart({\n      labels: labels,\n      datasets: [{\n        type: 'line',\n        label: lineChartData.label,\n        borderColor: lineChartData.color,\n        pointBackgroundColor: ChartConfig.color.white,\n        spanGaps: false,\n        lineTension: 0,\n        fill: false,\n        cubicInterpolationMode: 'monotone',\n        pointBorderWidth: 2,\n        pointRadius: 6,\n        pointBorderColor: lineChartData.color,\n        data: lineChartData.data\n      }, {\n        type: 'bar',\n        label: barChartData.label,\n        backgroundColor: barChartData.color,\n        hoverBackgroundColor: barChartData.color,\n        borderWidth: 0,\n        data: barChartData.data\n      }, {\n        type: 'bar',\n        label: barChartData2.label,\n        backgroundColor: barChartData2.color,\n        hoverBackgroundColor: barChartData2.color,\n        borderWidth: 0,\n        data: barChartData2.data\n      }]\n    }, this.options);\n  }\n};",{"version":3,"sources":["src/components/Charts/AdCampaignPerfomance.js"],"names":["Bar","Line","ChartConfig","extends","props","data","options","responsive","maintainAspectRatio","scales","yAxes","ticks","display","max","gridLines","drawBorder","xAxes","padding","barPercentage","categoryPercentage","legend","mounted","labels","lineChartData","barChartData","barChartData2","enableShadow","ctx","$refs","canvas","getContext","_stroke","stroke","save","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","apply","arguments","restore","renderChart","datasets","type","label","borderColor","color","pointBackgroundColor","white","spanGaps","lineTension","fill","cubicInterpolationMode","pointBorderWidth","pointRadius","pointBorderColor","backgroundColor","hoverBackgroundColor","borderWidth"],"mappings":"AAAA;AACA,SAASA,GAAT,EAAcC,IAAd,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA,eAAgB;AACbC,WAASH,GADI;AAEbC,YAFa;AAGbG,SAAO,CAAC,MAAD,CAHM;AAIbC,QAAM,gBAAY;AACf,WAAO;AACJC,eAAS;AACNC,oBAAY,IADN;AAENC,6BAAqB,KAFf;AAGNC,gBAAQ;AACLC,iBAAO,CAAC;AACLC,mBAAO;AACJC,uBAAS,KADL;AAEJC,mBAAK;AAFD,aADF;AAKLC,uBAAW;AACRF,uBAAS,KADD;AAERG,0BAAY;AAFJ;AALN,WAAD,CADF;AAWLC,iBAAO,CAAC;AACLL,mBAAO;AACJM,uBAAS;AADL,aADF;AAILC,2BAAe,GAJV;AAKLC,gCAAoB,GALf;AAMLL,uBAAW;AACRF,uBAAS,KADD;AAERG,0BAAY;AAFJ;AANN,WAAD;AAXF,SAHF;AA0BNK,gBAAQ;AACLR,mBAAS;AADJ;AA1BF;AADL,KAAP;AAgCF,GArCY;AAsCbS,SAtCa,qBAsCH;AAAA,qBACwD,KAAKhB,IAD7D;AAAA,QACCiB,MADD,cACCA,MADD;AAAA,QACSC,aADT,cACSA,aADT;AAAA,QACwBC,YADxB,cACwBA,YADxB;AAAA,QACsCC,aADtC,cACsCA,aADtC;;AAEP,QAAI,KAAKC,YAAL,KAAsB,KAA1B,EAAiC;AAC9B,UAAIC,MAAM,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,UAAlB,CAA6B,IAA7B,CAAV;AACA,UAAIC,UAAUJ,IAAIK,MAAlB;;AACAL,UAAIK,MAAJ,GAAa,YAAY;AACtBL,YAAIM,IAAJ;AACAN,YAAIO,WAAJ,GAAkBhC,YAAYgC,WAA9B;AACAP,YAAIQ,UAAJ,GAAiB,EAAjB;AACAR,YAAIS,aAAJ,GAAoB,CAApB;AACAT,YAAIU,aAAJ,GAAoB,EAApB;;AACAN,gBAAQO,KAAR,CAAc,IAAd,EAAoBC,SAApB;;AACAZ,YAAIa,OAAJ;AACF,OARD;AASF;;AAED,SAAKC,WAAL,CAAiB;AACdnB,oBADc;AAEdoB,gBAAU,CACP;AACGC,cAAM,MADT;AAEGC,eAAOrB,cAAcqB,KAFxB;AAGGC,qBAAatB,cAAcuB,KAH9B;AAIGC,8BAAsB7C,YAAY4C,KAAZ,CAAkBE,KAJ3C;AAKGC,kBAAU,KALb;AAMGC,qBAAa,CANhB;AAOGC,cAAM,KAPT;AAQGC,gCAAwB,UAR3B;AASGC,0BAAkB,CATrB;AAUGC,qBAAa,CAVhB;AAWGC,0BAAkBhC,cAAcuB,KAXnC;AAYGzC,cAAMkB,cAAclB;AAZvB,OADO,EAeP;AACGsC,cAAM,KADT;AAEGC,eAAOpB,aAAaoB,KAFvB;AAGGY,yBAAiBhC,aAAasB,KAHjC;AAIGW,8BAAsBjC,aAAasB,KAJtC;AAKGY,qBAAa,CALhB;AAMGrD,cAAMmB,aAAanB;AANtB,OAfO,EAuBP;AACGsC,cAAM,KADT;AAEGC,eAAOnB,cAAcmB,KAFxB;AAGGY,yBAAiB/B,cAAcqB,KAHlC;AAIGW,8BAAsBhC,cAAcqB,KAJvC;AAKGY,qBAAa,CALhB;AAMGrD,cAAMoB,cAAcpB;AANvB,OAvBO;AAFI,KAAjB,EAkCG,KAAKC,OAlCR;AAmCF;AAzFY,CAAhB","sourceRoot":"/Users/admin/Desktop/template-vue","sourcesContent":["// Sales Widget\nimport { Bar, Line } from 'vue-chartjs'\nimport { ChartConfig } from \"Constants/chart-config\";\n\nexport default ({\n   extends: Bar,\n   Line,\n   props: ['data'],\n   data: function () {\n      return {\n         options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n               yAxes: [{\n                  ticks: {\n                     display: false,\n                     max: 80\n                  },\n                  gridLines: {\n                     display: false,\n                     drawBorder: false\n                  }\n               }],\n               xAxes: [{\n                  ticks: {\n                     padding: 10\n                  },\n                  barPercentage: 1.1,\n                  categoryPercentage: 0.4,\n                  gridLines: {\n                     display: false,\n                     drawBorder: false\n                  }\n               }]\n            },\n            legend: {\n               display: false\n            }\n         }\n      }\n   },\n   mounted() {\n      const { labels, lineChartData, barChartData, barChartData2 } = this.data;\n      if (this.enableShadow !== false) {\n         let ctx = this.$refs.canvas.getContext('2d')\n         let _stroke = ctx.stroke\n         ctx.stroke = function () {\n            ctx.save()\n            ctx.shadowColor = ChartConfig.shadowColor\n            ctx.shadowBlur = 10\n            ctx.shadowOffsetX = 0\n            ctx.shadowOffsetY = 12\n            _stroke.apply(this, arguments)\n            ctx.restore()\n         }\n      }\n\n      this.renderChart({\n         labels,\n         datasets: [\n            {\n               type: 'line',\n               label: lineChartData.label,\n               borderColor: lineChartData.color,\n               pointBackgroundColor: ChartConfig.color.white,\n               spanGaps: false,\n               lineTension: 0,\n               fill: false,\n               cubicInterpolationMode: 'monotone',\n               pointBorderWidth: 2,\n               pointRadius: 6,\n               pointBorderColor: lineChartData.color,\n               data: lineChartData.data\n            },\n            {\n               type: 'bar',\n               label: barChartData.label,\n               backgroundColor: barChartData.color,\n               hoverBackgroundColor: barChartData.color,\n               borderWidth: 0,\n               data: barChartData.data\n            },\n            {\n               type: 'bar',\n               label: barChartData2.label,\n               backgroundColor: barChartData2.color,\n               hoverBackgroundColor: barChartData2.color,\n               borderWidth: 0,\n               data: barChartData2.data\n            },\n         ]\n      }, this.options)\n   }\n})\n"]}]}