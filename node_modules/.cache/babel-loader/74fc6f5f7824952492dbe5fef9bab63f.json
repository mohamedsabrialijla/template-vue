{"remainingRequest":"/Users/admin/Desktop/template-vue/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/template-vue/src/auth/AuthService.js","dependencies":[{"path":"/Users/admin/Desktop/template-vue/src/auth/AuthService.js","mtime":1535529988000},{"path":"/Users/admin/Desktop/template-vue/node_modules/cache-loader/dist/cjs.js","mtime":1544032770804},{"path":"/Users/admin/Desktop/template-vue/node_modules/babel-loader/lib/index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport _classCallCheck from \"/Users/admin/Desktop/template-vue/node_modules/@babel/runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"/Users/admin/Desktop/template-vue/node_modules/@babel/runtime/helpers/builtin/es6/createClass\";\nimport auth0 from 'auth0-js';\nimport { AUTH_CONFIG } from './auth0-variables';\nimport EventEmitter from 'eventemitter3';\nimport router from '../router';\nimport { store } from '../store/store';\n\nvar AuthService =\n/*#__PURE__*/\nfunction () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n\n    this.login = this.login.bind(this);\n    this.setSession = this.setSession.bind(this);\n    this.logout = this.logout.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.authenticated = this.isAuthenticated();\n    this.authNotifier = new EventEmitter();\n    this.auth0 = new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientId,\n      redirectUri: AUTH_CONFIG.callbackUrl,\n      audience: \"https://\".concat(AUTH_CONFIG.domain, \"/userinfo\"),\n      responseType: 'token id_token',\n      scope: 'openid'\n    });\n  }\n\n  _createClass(AuthService, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      this.auth0.parseHash(function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this.setSession(authResult);\n\n          router.replace('/default/dashboard/ecommerce');\n        } else if (err) {\n          router.replace('/');\n          console.log(err);\n          alert(\"Error: \".concat(err.error, \". Check the console for further details.\"));\n        }\n      });\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      store.dispatch('signInUserWithAuth0', authResult);\n      localStorage.setItem('isUserSigninWithAuth0', true); // Set the time that the access token will expire at\n\n      var expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n      localStorage.setItem('access_token', authResult.accessToken);\n      localStorage.setItem('id_token', authResult.idToken);\n      localStorage.setItem('expires_at', expiresAt);\n      this.authNotifier.emit('authChange', {\n        authenticated: true\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      store.dispatch('signOutUserFromAuth0'); // Clear access token and ID token from local storage\n\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('expires_at');\n      this.userProfile = null;\n      this.authNotifier.emit('authChange', false); // navigate to the home route\n\n      router.push('/session/login');\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the\n      // access token's expiry time\n      var expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n      return new Date().getTime() < expiresAt;\n    }\n  }]);\n\n  return AuthService;\n}();\n\nexport default AuthService;",{"version":3,"sources":["src/auth/AuthService.js"],"names":["auth0","AUTH_CONFIG","EventEmitter","router","store","AuthService","login","bind","setSession","logout","isAuthenticated","authenticated","authNotifier","WebAuth","domain","clientID","clientId","redirectUri","callbackUrl","audience","responseType","scope","authorize","parseHash","err","authResult","accessToken","idToken","replace","console","log","alert","error","dispatch","localStorage","setItem","expiresAt","JSON","stringify","expiresIn","Date","getTime","emit","removeItem","userProfile","push","parse","getItem"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;;IAEMC,W;;;AAEJ,yBAAc;AAAA;;AACZ,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKE,MAAL,GAAc,KAAKA,MAAL,CAAYF,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKI,aAAL,GAAqB,KAAKD,eAAL,EAArB;AACA,SAAKE,YAAL,GAAoB,IAAIV,YAAJ,EAApB;AACA,SAAKF,KAAL,GAAa,IAAIA,MAAMa,OAAV,CAAkB;AAC7BC,cAAQb,YAAYa,MADS;AAE7BC,gBAAUd,YAAYe,QAFO;AAG7BC,mBAAahB,YAAYiB,WAHI;AAI7BC,kCAAqBlB,YAAYa,MAAjC,cAJ6B;AAK7BM,oBAAc,gBALe;AAM7BC,aAAO;AANsB,KAAlB,CAAb;AAQD;;;;4BAEO;AACN,WAAKrB,KAAL,CAAWsB,SAAX;AACD;;;2CAEsB;AAAA;;AACrB,WAAKtB,KAAL,CAAWuB,SAAX,CAAqB,UAACC,GAAD,EAAMC,UAAN,EAAqB;AACxC,YAAIA,cAAcA,WAAWC,WAAzB,IAAwCD,WAAWE,OAAvD,EAAgE;AAC9D,gBAAKnB,UAAL,CAAgBiB,UAAhB;;AACAtB,iBAAOyB,OAAP,CAAe,8BAAf;AACD,SAHD,MAGO,IAAIJ,GAAJ,EAAS;AACdrB,iBAAOyB,OAAP,CAAe,GAAf;AACAC,kBAAQC,GAAR,CAAYN,GAAZ;AACAO,iCAAgBP,IAAIQ,KAApB;AACD;AACF,OATD;AAUD;;;+BAEUP,U,EAAY;AACrBrB,YAAM6B,QAAN,CAAe,qBAAf,EAAsCR,UAAtC;AACAS,mBAAaC,OAAb,CAAqB,uBAArB,EAA8C,IAA9C,EAFqB,CAGrB;;AACA,UAAIC,YAAYC,KAAKC,SAAL,CACdb,WAAWc,SAAX,GAAuB,IAAvB,GAA8B,IAAIC,IAAJ,GAAWC,OAAX,EADhB,CAAhB;AAGAP,mBAAaC,OAAb,CAAqB,cAArB,EAAqCV,WAAWC,WAAhD;AACAQ,mBAAaC,OAAb,CAAqB,UAArB,EAAiCV,WAAWE,OAA5C;AACAO,mBAAaC,OAAb,CAAqB,YAArB,EAAmCC,SAAnC;AACA,WAAKxB,YAAL,CAAkB8B,IAAlB,CAAuB,YAAvB,EAAqC;AAAE/B,uBAAe;AAAjB,OAArC;AACD;;;6BAEQ;AACPP,YAAM6B,QAAN,CAAe,sBAAf,EADO,CAEP;;AACAC,mBAAaS,UAAb,CAAwB,cAAxB;AACAT,mBAAaS,UAAb,CAAwB,UAAxB;AACAT,mBAAaS,UAAb,CAAwB,YAAxB;AACA,WAAKC,WAAL,GAAmB,IAAnB;AACA,WAAKhC,YAAL,CAAkB8B,IAAlB,CAAuB,YAAvB,EAAqC,KAArC,EAPO,CAQP;;AACAvC,aAAO0C,IAAP,CAAY,gBAAZ;AACD;;;sCAEiB;AAChB;AACA;AACA,UAAIT,YAAYC,KAAKS,KAAL,CAAWZ,aAAaa,OAAb,CAAqB,YAArB,CAAX,CAAhB;AACA,aAAO,IAAIP,IAAJ,GAAWC,OAAX,KAAuBL,SAA9B;AACD;;;;;;AAGH,eAAe/B,WAAf","sourceRoot":"/Users/admin/Desktop/template-vue","sourcesContent":["import auth0 from 'auth0-js'\nimport { AUTH_CONFIG } from './auth0-variables'\nimport EventEmitter from 'eventemitter3'\nimport router from '../router'\nimport { store } from '../store/store';\n\nclass AuthService {\n\n  constructor() {\n    this.login = this.login.bind(this)\n    this.setSession = this.setSession.bind(this)\n    this.logout = this.logout.bind(this)\n    this.isAuthenticated = this.isAuthenticated.bind(this)\n    this.authenticated = this.isAuthenticated()\n    this.authNotifier = new EventEmitter()\n    this.auth0 = new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientId,\n      redirectUri: AUTH_CONFIG.callbackUrl,\n      audience: `https://${AUTH_CONFIG.domain}/userinfo`,\n      responseType: 'token id_token',\n      scope: 'openid'\n    })\n  }\n\n  login() {\n    this.auth0.authorize()\n  }\n\n  handleAuthentication() {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult)\n        router.replace('/default/dashboard/ecommerce')\n      } else if (err) {\n        router.replace('/')\n        console.log(err)\n        alert(`Error: ${err.error}. Check the console for further details.`)\n      }\n    })\n  }\n\n  setSession(authResult) {\n    store.dispatch('signInUserWithAuth0', authResult)\n    localStorage.setItem('isUserSigninWithAuth0', true)\n    // Set the time that the access token will expire at\n    let expiresAt = JSON.stringify(\n      authResult.expiresIn * 1000 + new Date().getTime()\n    )\n    localStorage.setItem('access_token', authResult.accessToken)\n    localStorage.setItem('id_token', authResult.idToken)\n    localStorage.setItem('expires_at', expiresAt)\n    this.authNotifier.emit('authChange', { authenticated: true })\n  }\n\n  logout() {\n    store.dispatch('signOutUserFromAuth0')\n    // Clear access token and ID token from local storage\n    localStorage.removeItem('access_token')\n    localStorage.removeItem('id_token')\n    localStorage.removeItem('expires_at')\n    this.userProfile = null\n    this.authNotifier.emit('authChange', false)\n    // navigate to the home route\n    router.push('/session/login')\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    let expiresAt = JSON.parse(localStorage.getItem('expires_at'))\n    return new Date().getTime() < expiresAt\n  }\n}\n\nexport default AuthService;"]}]}