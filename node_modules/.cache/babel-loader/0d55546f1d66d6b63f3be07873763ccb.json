{"remainingRequest":"/Users/admin/Desktop/template-vue/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/template-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/template-vue/node_modules/vue-slick/slickCarousel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/template-vue/node_modules/vue-slick/slickCarousel.vue","mtime":1529739647000},{"path":"/Users/admin/Desktop/template-vue/node_modules/cache-loader/dist/cjs.js","mtime":1544032770804},{"path":"/Users/admin/Desktop/template-vue/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/admin/Desktop/template-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\nimport Vue from 'vue';\nimport $ from 'jquery'; // Check if the request came from the browser and is not server rendered\n\nif (typeof window !== 'undefined') {\n  var slick = require('slick-carousel');\n}\n\nexport default {\n  props: {\n    options: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.create();\n  },\n  destroyed: function destroyed() {\n    $(this.$el).slick('unslick');\n  },\n  methods: {\n    create: function create() {\n      var $slick = $(this.$el);\n      $slick.on('afterChange', this.onAfterChange);\n      $slick.on('beforeChange', this.onBeforeChange);\n      $slick.on('breakpoint', this.onBreakpoint);\n      $slick.on('destroy', this.onDestroy);\n      $slick.on('edge', this.onEdge);\n      $slick.on('init', this.onInit);\n      $slick.on('reInit', this.onReInit);\n      $slick.on('setPosition', this.onSetPosition);\n      $slick.on('swipe', this.onSwipe);\n      $slick.on('lazyLoaded', this.onLazyLoaded);\n      $slick.on('lazyLoadError', this.onLazyLoadError);\n      $slick.slick(this.options);\n    },\n    destroy: function destroy() {\n      var $slick = $(this.$el);\n      $slick.off('afterChange', this.onAfterChange);\n      $slick.off('beforeChange', this.onBeforeChange);\n      $slick.off('breakpoint', this.onBreakpoint);\n      $slick.off('destroy', this.onDestroy);\n      $slick.off('edge', this.onEdge);\n      $slick.off('init', this.onInit);\n      $slick.off('reInit', this.onReInit);\n      $slick.off('setPosition', this.onSetPosition);\n      $slick.off('swipe', this.onSwipe);\n      $slick.off('lazyLoaded', this.onLazyLoaded);\n      $slick.off('lazyLoadError', this.onLazyLoadError);\n      $(this.$el).slick('unslick');\n    },\n    reSlick: function reSlick() {\n      this.destroy();\n      this.create();\n    },\n    next: function next() {\n      $(this.$el).slick('slickNext');\n    },\n    prev: function prev() {\n      $(this.$el).slick('slickPrev');\n    },\n    pause: function pause() {\n      $(this.$el).slick('slickPause');\n    },\n    play: function play() {\n      $(this.$el).slick('slickPlay');\n    },\n    goTo: function goTo(index, dontAnimate) {\n      $(this.$el).slick('slickGoTo', index, dontAnimate);\n    },\n    currentSlide: function currentSlide() {\n      return $(this.$el).slick('slickCurrentSlide');\n    },\n    add: function add(element, index, addBefore) {\n      $(this.$el).slick('slickAdd', element, index, addBefore);\n    },\n    remove: function remove(index, removeBefore) {\n      $(this.$el).slick('slickRemove', index, removeBefore);\n    },\n    filter: function filter(filterData) {\n      $(this.$el).slick('slickFilter', filterData);\n    },\n    unfilter: function unfilter() {\n      $(this.$el).slick('slickUnfilter');\n    },\n    getOption: function getOption(option) {\n      $(this.$el).slick('slickGetOption', option);\n    },\n    setOption: function setOption(option, value, refresh) {\n      $(this.$el).slick('slickSetOption', option, value, refresh);\n    },\n    setPosition: function setPosition() {\n      $(this.$el).slick('setPosition');\n    },\n    // Events\n    onAfterChange: function onAfterChange(event, slick, currentSlide) {\n      this.$emit('afterChange', event, slick, currentSlide);\n    },\n    onBeforeChange: function onBeforeChange(event, slick, currentSlide, nextSlide) {\n      this.$emit('beforeChange', event, slick, currentSlide, nextSlide);\n    },\n    onBreakpoint: function onBreakpoint(event, slick, breakpoint) {\n      this.$emit('breakpoint', event, slick, breakpoint);\n    },\n    onDestroy: function onDestroy(event, slick) {\n      this.$emit('destroy', event, slick);\n    },\n    onEdge: function onEdge(event, slick, direction) {\n      this.$emit('edge', event, slick, direction);\n    },\n    onInit: function onInit(event, slick) {\n      this.$emit('init', event, slick);\n    },\n    onReInit: function onReInit(event, slick) {\n      this.$emit('reInit', event, slick);\n    },\n    onSetPosition: function onSetPosition(event, slick) {\n      this.$emit('setPosition', event, slick);\n    },\n    onSwipe: function onSwipe(event, slick, direction) {\n      this.$emit('swipe', event, slick, direction);\n    },\n    onLazyLoaded: function onLazyLoaded(event, slick, image, imageSource) {\n      this.$emit('lazyLoaded', event, slick, image, imageSource);\n    },\n    onLazyLoadError: function onLazyLoadError(event, slick, image, imageSource) {\n      this.$emit('lazyLoadError', event, slick, image, imageSource);\n    }\n  }\n};",{"version":3,"sources":["slickCarousel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <slot></slot>\n  </div>\n</template>\n<script>\nimport Vue from 'vue';\nimport $ from 'jquery';\n\n// Check if the request came from the browser and is not server rendered\nif (typeof window !== 'undefined') {\n  const slick = require('slick-carousel')\n}\n\nexport default {\n  props: {\n    options: {\n      type: Object,\n      default: function() {\n        return {};\n      },\n    },\n  },\n\n  mounted: function() {\n    this.create();\n  },\n\n  destroyed: function() {\n    $(this.$el).slick('unslick');\n  },\n\n  methods: {\n    create: function() {\n      const $slick = $(this.$el);\n\n      $slick.on('afterChange', this.onAfterChange);\n      $slick.on('beforeChange', this.onBeforeChange);\n      $slick.on('breakpoint', this.onBreakpoint);\n      $slick.on('destroy', this.onDestroy);\n      $slick.on('edge', this.onEdge);\n      $slick.on('init', this.onInit);\n      $slick.on('reInit', this.onReInit);\n      $slick.on('setPosition', this.onSetPosition);\n      $slick.on('swipe', this.onSwipe);\n      $slick.on('lazyLoaded', this.onLazyLoaded);\n      $slick.on('lazyLoadError', this.onLazyLoadError);\n\n      $slick.slick(this.options);\n    },\n\n    destroy: function() {\n      const $slick = $(this.$el);\n\n      $slick.off('afterChange', this.onAfterChange);\n      $slick.off('beforeChange', this.onBeforeChange);\n      $slick.off('breakpoint', this.onBreakpoint);\n      $slick.off('destroy', this.onDestroy);\n      $slick.off('edge', this.onEdge);\n      $slick.off('init', this.onInit);\n      $slick.off('reInit', this.onReInit);\n      $slick.off('setPosition', this.onSetPosition);\n      $slick.off('swipe', this.onSwipe);\n      $slick.off('lazyLoaded', this.onLazyLoaded);\n      $slick.off('lazyLoadError', this.onLazyLoadError);\n      $(this.$el).slick('unslick');\n    },\n\n    reSlick: function() {\n      this.destroy();\n      this.create();\n    },\n\n    next: function() {\n      $(this.$el).slick('slickNext');\n    },\n\n    prev: function() {\n      $(this.$el).slick('slickPrev');\n    },\n\n    pause: function() {\n      $(this.$el).slick('slickPause');\n    },\n\n    play: function() {\n      $(this.$el).slick('slickPlay');\n    },\n\n    goTo: function(index, dontAnimate) {\n      $(this.$el).slick('slickGoTo', index, dontAnimate);\n    },\n\n    currentSlide: function() {\n      return $(this.$el).slick('slickCurrentSlide');\n    },\n\n    add: function(element, index, addBefore) {\n      $(this.$el).slick('slickAdd', element, index, addBefore);\n    },\n\n    remove: function(index, removeBefore) {\n      $(this.$el).slick('slickRemove', index, removeBefore);\n    },\n\n    filter: function(filterData) {\n      $(this.$el).slick('slickFilter', filterData);\n    },\n\n    unfilter: function() {\n      $(this.$el).slick('slickUnfilter');\n    },\n\n    getOption: function(option) {\n      $(this.$el).slick('slickGetOption', option);\n    },\n\n    setOption: function(option, value, refresh) {\n      $(this.$el).slick('slickSetOption', option, value, refresh);\n    },\n\n    setPosition: function() {\n      $(this.$el).slick('setPosition');\n    },\n\n    // Events\n    onAfterChange: function(event, slick, currentSlide) {\n      this.$emit('afterChange', event, slick, currentSlide);\n    },\n\n    onBeforeChange: function(event, slick, currentSlide, nextSlide) {\n      this.$emit('beforeChange', event, slick, currentSlide, nextSlide);\n    },\n\n    onBreakpoint: function(event, slick, breakpoint) {\n      this.$emit('breakpoint', event, slick, breakpoint);\n    },\n\n    onDestroy: function(event, slick) {\n      this.$emit('destroy', event, slick);\n    },\n\n    onEdge: function(event, slick, direction) {\n      this.$emit('edge', event, slick, direction);\n    },\n\n    onInit: function(event, slick) {\n      this.$emit('init', event, slick);\n    },\n\n    onReInit: function(event, slick) {\n      this.$emit('reInit', event, slick);\n    },\n\n    onSetPosition: function(event, slick) {\n      this.$emit('setPosition', event, slick);\n    },\n\n    onSwipe: function(event, slick, direction) {\n      this.$emit('swipe', event, slick, direction);\n    },\n\n    onLazyLoaded: function(event, slick, image, imageSource) {\n      this.$emit('lazyLoaded', event, slick, image, imageSource);\n    },\n\n    onLazyLoadError: function(event, slick, image, imageSource) {\n      this.$emit('lazyLoadError', event, slick, image, imageSource);\n    },\n  },\n\n};\n</script>\n\n"],"sourceRoot":"node_modules/vue-slick"}]}