{"remainingRequest":"/Users/admin/Desktop/template-vue/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/template-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/template-vue/node_modules/vue-echarts/components/ECharts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/template-vue/node_modules/vue-echarts/components/ECharts.vue","mtime":499162500000},{"path":"/Users/admin/Desktop/template-vue/node_modules/cache-loader/dist/cjs.js","mtime":1544032770804},{"path":"/Users/admin/Desktop/template-vue/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/admin/Desktop/template-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport echarts from 'echarts/lib/echarts';\nimport debounce from 'lodash/debounce';\nimport { addListener, removeListener } from 'resize-detector'; // enumerating ECharts events for now\n\nvar EVENTS = ['legendselectchanged', 'legendselected', 'legendunselected', 'legendunscroll', 'datazoom', 'datarangeselected', 'timelinechanged', 'timelineplaychanged', 'restore', 'dataviewchanged', 'magictypechanged', 'geoselectchanged', 'geoselected', 'geounselected', 'pieselectchanged', 'pieselected', 'pieunselected', 'mapselectchanged', 'mapselected', 'mapunselected', 'axisareaselected', 'focusnodeadjacency', 'unfocusnodeadjacency', 'brush', 'brushselected', 'rendered', 'finished', 'click', 'dblclick', 'mouseover', 'mouseout', 'mousedown', 'mouseup', 'globalout'];\nexport default {\n  props: {\n    options: Object,\n    theme: [String, Object],\n    initOptions: Object,\n    group: String,\n    autoResize: Boolean,\n    watchShallow: Boolean,\n    manualUpdate: Boolean\n  },\n  data: function data() {\n    return {\n      lastArea: 0\n    };\n  },\n  watch: {\n    group: function group(_group) {\n      this.chart.group = _group;\n    }\n  },\n  methods: {\n    // provide a explicit merge option method\n    mergeOptions: function mergeOptions(options, notMerge, lazyUpdate) {\n      if (this.manualUpdate) {\n        this.manualOptions = options;\n      }\n\n      if (!this.chart) {\n        this.init();\n      } else {\n        this.delegateMethod('setOption', options, notMerge, lazyUpdate);\n      }\n    },\n    // just delegates ECharts methods to Vue component\n    // use explicit params to reduce transpiled size for now\n    appendData: function appendData(params) {\n      this.delegateMethod('appendData', params);\n    },\n    resize: function resize(options) {\n      this.delegateMethod('resize', options);\n    },\n    dispatchAction: function dispatchAction(payload) {\n      this.delegateMethod('dispatchAction', payload);\n    },\n    convertToPixel: function convertToPixel(finder, value) {\n      return this.delegateMethod('convertToPixel', finder, value);\n    },\n    convertFromPixel: function convertFromPixel(finder, value) {\n      return this.delegateMethod('convertFromPixel', finder, value);\n    },\n    containPixel: function containPixel(finder, value) {\n      return this.delegateMethod('containPixel', finder, value);\n    },\n    showLoading: function showLoading(type, options) {\n      this.delegateMethod('showLoading', type, options);\n    },\n    hideLoading: function hideLoading() {\n      this.delegateMethod('hideLoading');\n    },\n    getDataURL: function getDataURL(options) {\n      return this.delegateMethod('getDataURL', options);\n    },\n    getConnectedDataURL: function getConnectedDataURL(options) {\n      return this.delegateMethod('getConnectedDataURL', options);\n    },\n    clear: function clear() {\n      this.delegateMethod('clear');\n    },\n    dispose: function dispose() {\n      this.delegateMethod('dispose');\n    },\n    delegateMethod: function delegateMethod(name) {\n      var _this$chart;\n\n      if (!this.chart) {\n        this.init();\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_this$chart = this.chart)[name].apply(_this$chart, args);\n    },\n    delegateGet: function delegateGet(name, method) {\n      if (!this.chart) {\n        this.init();\n      }\n\n      return this.chart[method]();\n    },\n    getArea: function getArea() {\n      return this.$el.offsetWidth * this.$el.offsetHeight;\n    },\n    init: function init() {\n      var _this = this;\n\n      if (this.chart) {\n        return;\n      }\n\n      var chart = echarts.init(this.$el, this.theme, this.initOptions);\n\n      if (this.group) {\n        chart.group = this.group;\n      }\n\n      chart.setOption(this.manualOptions || this.options || {}, true); // expose ECharts events as custom events\n\n      EVENTS.forEach(function (event) {\n        chart.on(event, function (params) {\n          _this.$emit(event, params);\n        });\n      });\n\n      if (this.autoResize) {\n        this.lastArea = this.getArea();\n        this.__resizeHandler = debounce(function () {\n          if (_this.lastArea === 0) {\n            // emulate initial render for initially hidden charts\n            _this.mergeOptions({}, true);\n\n            _this.resize();\n\n            _this.mergeOptions(_this.options || _this.manualOptions || {}, true);\n          } else {\n            _this.resize();\n          }\n\n          _this.lastArea = _this.getArea();\n        }, 100, {\n          leading: true\n        });\n        addListener(this.$el, this.__resizeHandler);\n      }\n\n      Object.defineProperties(this, {\n        // Only recalculated when accessed from JavaScript.\n        // Won't update DOM on value change because getters\n        // don't depend on reactive values\n        width: {\n          configurable: true,\n          get: function get() {\n            return _this.delegateGet('width', 'getWidth');\n          }\n        },\n        height: {\n          configurable: true,\n          get: function get() {\n            return _this.delegateGet('height', 'getHeight');\n          }\n        },\n        isDisposed: {\n          configurable: true,\n          get: function get() {\n            return !!_this.delegateGet('isDisposed', 'isDisposed');\n          }\n        },\n        computedOptions: {\n          configurable: true,\n          get: function get() {\n            return _this.delegateGet('computedOptions', 'getOption');\n          }\n        }\n      });\n      this.chart = chart;\n    },\n    destroy: function destroy() {\n      if (this.autoResize) {\n        removeListener(this.$el, this.__resizeHandler);\n      }\n\n      this.dispose();\n      this.chart = null;\n    },\n    refresh: function refresh() {\n      if (this.chart) {\n        this.destroy();\n        this.init();\n      }\n    }\n  },\n  created: function created() {\n    var _this2 = this;\n\n    if (!this.manualUpdate) {\n      this.$watch('options', function (options) {\n        if (!_this2.chart && options) {\n          _this2.init();\n        } else {\n          _this2.chart.setOption(_this2.options, true);\n        }\n      }, {\n        deep: !this.watchShallow\n      });\n    }\n\n    var watched = ['theme', 'initOptions', 'autoResize', 'manualUpdate', 'watchShallow'];\n    watched.forEach(function (prop) {\n      _this2.$watch(prop, function () {\n        _this2.refresh();\n      }, {\n        deep: true\n      });\n    });\n  },\n  mounted: function mounted() {\n    // auto init if `options` is already provided\n    if (this.options) {\n      this.init();\n    }\n  },\n  activated: function activated() {\n    if (this.autoResize) {\n      this.chart && this.chart.resize();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (!this.chart) {\n      return;\n    }\n\n    this.destroy();\n  },\n  connect: function connect(group) {\n    if (typeof group !== 'string') {\n      group = group.map(function (chart) {\n        return chart.chart;\n      });\n    }\n\n    echarts.connect(group);\n  },\n  disconnect: function disconnect(group) {\n    echarts.disConnect(group);\n  },\n  registerMap: function registerMap(mapName, geoJSON, specialAreas) {\n    echarts.registerMap(mapName, geoJSON, specialAreas);\n  },\n  registerTheme: function registerTheme(name, theme) {\n    echarts.registerTheme(name, theme);\n  },\n  graphic: echarts.graphic\n};",{"version":3,"sources":["ECharts.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div class=\"echarts\"/>\n</template>\n\n<style>\n.echarts {\n  width: 600px;\n  height: 400px;\n}\n</style>\n\n<script>\nimport echarts from 'echarts/lib/echarts'\nimport debounce from 'lodash/debounce'\nimport { addListener, removeListener } from 'resize-detector'\n\n// enumerating ECharts events for now\nconst EVENTS = [\n  'legendselectchanged',\n  'legendselected',\n  'legendunselected',\n  'legendunscroll',\n  'datazoom',\n  'datarangeselected',\n  'timelinechanged',\n  'timelineplaychanged',\n  'restore',\n  'dataviewchanged',\n  'magictypechanged',\n  'geoselectchanged',\n  'geoselected',\n  'geounselected',\n  'pieselectchanged',\n  'pieselected',\n  'pieunselected',\n  'mapselectchanged',\n  'mapselected',\n  'mapunselected',\n  'axisareaselected',\n  'focusnodeadjacency',\n  'unfocusnodeadjacency',\n  'brush',\n  'brushselected',\n  'rendered',\n  'finished',\n  'click',\n  'dblclick',\n  'mouseover',\n  'mouseout',\n  'mousedown',\n  'mouseup',\n  'globalout'\n]\n\nexport default {\n  props: {\n    options: Object,\n    theme: [String, Object],\n    initOptions: Object,\n    group: String,\n    autoResize: Boolean,\n    watchShallow: Boolean,\n    manualUpdate: Boolean\n  },\n  data () {\n    return {\n      lastArea: 0\n    }\n  },\n  watch: {\n    group (group) {\n      this.chart.group = group\n    }\n  },\n  methods: {\n    // provide a explicit merge option method\n    mergeOptions (options, notMerge, lazyUpdate) {\n      if (this.manualUpdate) {\n        this.manualOptions = options\n      }\n\n      if (!this.chart) {\n        this.init()\n      } else {\n        this.delegateMethod('setOption', options, notMerge, lazyUpdate)\n      }\n    },\n    // just delegates ECharts methods to Vue component\n    // use explicit params to reduce transpiled size for now\n    appendData (params) {\n      this.delegateMethod('appendData', params)\n    },\n    resize (options) {\n      this.delegateMethod('resize', options)\n    },\n    dispatchAction (payload) {\n      this.delegateMethod('dispatchAction', payload)\n    },\n    convertToPixel (finder, value) {\n      return this.delegateMethod('convertToPixel', finder, value)\n    },\n    convertFromPixel (finder, value) {\n      return this.delegateMethod('convertFromPixel', finder, value)\n    },\n    containPixel (finder, value) {\n      return this.delegateMethod('containPixel', finder, value)\n    },\n    showLoading (type, options) {\n      this.delegateMethod('showLoading', type, options)\n    },\n    hideLoading () {\n      this.delegateMethod('hideLoading')\n    },\n    getDataURL (options) {\n      return this.delegateMethod('getDataURL', options)\n    },\n    getConnectedDataURL (options) {\n      return this.delegateMethod('getConnectedDataURL', options)\n    },\n    clear () {\n      this.delegateMethod('clear')\n    },\n    dispose () {\n      this.delegateMethod('dispose')\n    },\n    delegateMethod (name, ...args) {\n      if (!this.chart) {\n        this.init()\n      }\n      return this.chart[name](...args)\n    },\n    delegateGet (name, method) {\n      if (!this.chart) {\n        this.init()\n      }\n      return this.chart[method]()\n    },\n    getArea () {\n      return this.$el.offsetWidth * this.$el.offsetHeight\n    },\n    init () {\n      if (this.chart) {\n        return\n      }\n\n      let chart = echarts.init(this.$el, this.theme, this.initOptions)\n\n      if (this.group) {\n        chart.group = this.group\n      }\n\n      chart.setOption(this.manualOptions || this.options || {}, true)\n\n      // expose ECharts events as custom events\n      EVENTS.forEach(event => {\n        chart.on(event, params => {\n          this.$emit(event, params)\n        })\n      })\n\n      if (this.autoResize) {\n        this.lastArea = this.getArea()\n        this.__resizeHandler = debounce(() => {\n          if (this.lastArea === 0) {\n            // emulate initial render for initially hidden charts\n            this.mergeOptions({}, true)\n            this.resize()\n            this.mergeOptions(this.options || this.manualOptions || {}, true)\n          } else {\n            this.resize()\n          }\n          this.lastArea = this.getArea()\n        }, 100, { leading: true })\n        addListener(this.$el, this.__resizeHandler)\n      }\n\n      Object.defineProperties(this, {\n        // Only recalculated when accessed from JavaScript.\n        // Won't update DOM on value change because getters\n        // don't depend on reactive values\n        width: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('width', 'getWidth')\n          }\n        },\n        height: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('height', 'getHeight')\n          }\n        },\n        isDisposed: {\n          configurable: true,\n          get: () => {\n            return !!this.delegateGet('isDisposed', 'isDisposed')\n          }\n        },\n        computedOptions: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('computedOptions', 'getOption')\n          }\n        }\n      })\n\n      this.chart = chart\n    },\n    destroy () {\n      if (this.autoResize) {\n        removeListener(this.$el, this.__resizeHandler)\n      }\n      this.dispose()\n      this.chart = null\n    },\n    refresh () {\n      if (this.chart) {\n        this.destroy()\n        this.init()\n      }\n    }\n  },\n  created () {\n    if (!this.manualUpdate) {\n      this.$watch('options', options => {\n        if (!this.chart && options) {\n          this.init()\n        } else {\n          this.chart.setOption(this.options, true)\n        }\n      }, { deep: !this.watchShallow })\n    }\n\n    let watched = ['theme', 'initOptions', 'autoResize', 'manualUpdate', 'watchShallow']\n    watched.forEach(prop => {\n      this.$watch(prop, () => {\n        this.refresh()\n      }, { deep: true })\n    })\n  },\n  mounted () {\n    // auto init if `options` is already provided\n    if (this.options) {\n      this.init()\n    }\n  },\n  activated () {\n    if (this.autoResize) {\n      this.chart && this.chart.resize()\n    }\n  },\n  beforeDestroy () {\n    if (!this.chart) {\n      return\n    }\n    this.destroy()\n  },\n  connect (group) {\n    if (typeof group !== 'string') {\n      group = group.map(chart => chart.chart)\n    }\n    echarts.connect(group)\n  },\n  disconnect (group) {\n    echarts.disConnect(group)\n  },\n  registerMap (mapName, geoJSON, specialAreas) {\n    echarts.registerMap(mapName, geoJSON, specialAreas)\n  },\n  registerTheme (name, theme) {\n    echarts.registerTheme(name, theme)\n  },\n  graphic: echarts.graphic\n}\n</script>\n"],"sourceRoot":"node_modules/vue-echarts/components"}]}